@model USASymbol.Models.ViewModels.SymbolDetailViewModel

@{
    ViewData["Title"] = $"{Model.Symbol.Name} - {Model.State.Name} State {GetSymbolTypeName(Model.Symbol.Type)}";
}

<!-- Schema.org Structured Data -->
<script type="application/ld+json">
    {
      "@@context": "https://schema.org",
      "@@type": "Article",
      "headline": "@Model.Symbol.Name - @Model.State.Name State @GetSymbolTypeName(Model.Symbol.Type)",
      "description": "Complete guide to @Model.State.Name's official state @Model.Symbol.Type, the @Model.Symbol.Name",
      "image": "@(Model.Symbol.ImageUrl ?? "/images/default-symbol.jpg")",
      "datePublished": "@(Model.Symbol.AdoptedYear.HasValue ? new DateTime(Model.Symbol.AdoptedYear.Value, 1, 1).ToString("yyyy-MM-dd") : "2020-01-01")",
      "dateModified": "@DateTime.Now.ToString("yyyy-MM-dd")",
      "author": {
        "@@type": "Organization",
        "name": "USA Symbol"
      },
      "publisher": {
        "@@type": "Organization",
        "name": "USA Symbol",
        "logo": {
          "@@type": "ImageObject",
          "url": "@(Context.Request.Scheme)://@(Context.Request.Host)/logo.png"
        }
      }
    }
</script>

<!-- BREADCRUMBS -->
<nav class="max-w-6xl mx-auto px-4 py-4 text-sm text-gray-600">
    <a href="/" class="hover:text-blue-900 transition">Home</a> /
    <a href="/symbols" class="hover:text-blue-900 transition">Symbols</a> /
    <a href="/symbols/@(GetPluralType(Model.Symbol.Type))" class="hover:text-blue-900 transition">State @GetSymbolTypeName(GetPluralType(Model.Symbol.Type))</a> /
    <span class="text-gray-900 font-semibold">@Model.State.Name</span>
</nav>

<!-- MAIN CONTENT -->
<main class="max-w-6xl mx-auto px-4 pb-12">

    <!-- PAGE TITLE -->
    <div class="mb-6">
        <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-2">
            @Model.State.Name State @GetSymbolTypeName(Model.Symbol.Type): @Model.Symbol.Name
        </h1>
        @if (Model.Symbol.AdoptedYear.HasValue)
        {
            <p class="text-xl text-gray-600">Official State Symbol Since @Model.Symbol.AdoptedYear</p>
        }
    </div>

    <!-- AUTHOR BOX -->
    <div class="bg-blue-50 rounded-lg p-4 border-l-4 border-blue-600 mb-8 shadow-sm">
        <div class="flex items-center justify-between flex-wrap gap-4">
            <div class="flex items-center gap-3">
                <div class="w-12 h-12 rounded-lg border-2 border-blue-200 bg-gradient-to-br from-blue-900 to-blue-600 flex items-center justify-center text-white font-bold text-xl">
                    US
                </div>
                <div>
                    <div class="flex items-center gap-2">
                        <span class="text-sm font-semibold text-gray-800">Researched by USA Symbol Team</span>
                        <svg class="w-4 h-4 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                        </svg>
                    </div>
                    <p class="text-xs text-gray-500">Fact-checked • Updated @DateTime.Now.ToString("MMMM d, yyyy")</p>
                </div>
            </div>
            <div class="flex items-center gap-3 text-xs">
                <a asp-controller="Home" asp-action="About" class="text-blue-700 hover:text-blue-900 font-semibold transition">About</a>
            </div>
        </div>
    </div>

    <!-- HERO SECTION -->
    <section class="mb-10">
        <div class="bg-white border rounded-2xl overflow-hidden shadow-lg">
            <div class="md:flex">
                <!-- Image -->
                <div class="w-full md:w-1/2 h-64 md:h-96 @GetBackgroundColor(Model.Symbol.Type) flex items-center justify-center">
                    @if (!string.IsNullOrEmpty(Model.Symbol.ImageUrl))
                    {
                        <img src="@Model.Symbol.ImageUrl" alt="@Model.Symbol.Name" class="w-full h-full object-cover">
                    }
                    else
                    {
                        <div class="text-center p-8">
                            <div class="text-8xl mb-4">@GetSymbolIcon(Model.Symbol.Type)</div>
                            <p class="text-sm text-gray-500">@Model.Symbol.Name</p>
                        </div>
                    }
                </div>

                <!-- Info -->
                <div class="p-6 md:p-8 flex-1">
                    <div class="inline-block bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-xs font-semibold mb-4">
                        @Model.State.Name State @GetSymbolTypeName(Model.Symbol.Type)
                    </div>

                    <h2 class="text-3xl font-bold text-gray-900 mb-4">@Model.Symbol.Name</h2>

                    @if (!string.IsNullOrEmpty(Model.Symbol.ScientificName))
                    {
                        <p class="text-lg text-gray-600 italic mb-6">@Model.Symbol.ScientificName</p>
                    }

                    <dl class="space-y-4">
                        <div class="border-b pb-3">
                            <dt class="text-sm font-semibold text-gray-500 mb-1">State</dt>
                            <dd class="text-lg font-bold text-gray-900">
                                <a href="/states/@Model.State.Slug" class="text-blue-700 hover:underline">@Model.State.Name</a>
                            </dd>
                        </div>

                        @if (Model.Symbol.AdoptedYear.HasValue)
                        {
                            <div class="border-b pb-3">
                                <dt class="text-sm font-semibold text-gray-500 mb-1">Adopted</dt>
                                <dd class="text-lg font-bold text-gray-900">@Model.Symbol.AdoptedYear</dd>
                            </div>
                        }

                        <div>
                            <dt class="text-sm font-semibold text-gray-500 mb-1">Symbol Type</dt>
                            <dd class="text-lg font-bold text-gray-900">@GetSymbolTypeName(Model.Symbol.Type)</dd>
                        </div>
                    </dl>
                </div>
            </div>
        </div>
    </section>

    <!-- CONTENT SECTIONS -->
    @if (Model.Content != null && !string.IsNullOrEmpty(Model.Content.Html))
    {
        <section class="prose prose-lg max-w-none mb-10">
            <div class="bg-white rounded-xl p-8 shadow-sm">
                @Html.Raw(Model.Content.Html)
            </div>
        </section>
    }
    else
    {
        <!-- Placeholder content if no markdown -->
        <section class="bg-white rounded-xl p-8 shadow-sm mb-10">
            <h2 class="text-2xl font-bold mb-4">About the @Model.Symbol.Name</h2>
            <p class="text-gray-600 mb-4">
                The @Model.Symbol.Name is the official state @Model.Symbol.Type of @Model.State.Name.
                @if (Model.Symbol.AdoptedYear.HasValue)
                {
                    <text>It was adopted in @Model.Symbol.AdoptedYear.</text>
                }
            </p>
            @if (!string.IsNullOrEmpty(Model.Symbol.ScientificName))
            {
                <p class="text-gray-600">
                    <strong>Scientific Name:</strong> <em>@Model.Symbol.ScientificName</em>
                </p>
            }
        </section>
    }

    <!-- RELATED SYMBOLS -->
    @if (Model.RelatedSymbols.Any())
    {
        <section class="mb-10">
            <h2 class="text-2xl font-bold mb-6">Other @Model.State.Name Symbols</h2>
            <div class="grid md:grid-cols-3 gap-6">
                @foreach (var symbol in Model.RelatedSymbols)
                {
                    <a href="/states/@Model.State.Slug/@symbol.Type"
                       class="bg-white rounded-xl p-6 shadow-sm hover:shadow-lg transition border-2 border-transparent hover:border-blue-500">
                        <div class="text-4xl mb-3 text-center">@GetSymbolIcon(symbol.Type)</div>
                        <div class="text-center">
                            <div class="text-sm text-blue-700 font-semibold uppercase mb-1">@GetSymbolTypeName(symbol.Type)</div>
                            <h3 class="text-lg font-bold text-gray-800">@symbol.Name</h3>
                        </div>
                    </a>
                }
            </div>
        </section>
    }

    <!-- NAVIGATION LINKS -->
    <div class="mt-10 flex flex-wrap gap-4 justify-center">
        <a href="/symbols/@(GetPluralType(Model.Symbol.Type))"
           class="px-6 py-3 rounded-lg bg-white border-2 border-blue-600 text-blue-600 font-semibold hover:bg-blue-50 transition shadow-sm">
            ← Back to All State @GetSymbolTypeName(GetPluralType(Model.Symbol.Type))
        </a>
        <a href="/states/@Model.State.Slug"
           class="px-6 py-3 rounded-lg bg-blue-600 text-white font-semibold hover:bg-blue-700 transition shadow-sm">
            See All @Model.State.Name Symbols →
        </a>
    </div>

</main>

@functions {
    string GetSymbolTypeName(string type)
    {
        return type switch
        {
            "bird" => "Bird",
            "birds" => "Birds",
            "flower" => "Flower",
            "flowers" => "Flowers",
            "tree" => "Tree",
            "trees" => "Trees",
            "motto" => "Motto",
            "mottos" => "Mottos",
            "animal" => "Animal",
            "animals" => "Animals",
            "flag" => "Flag",
            "flags" => "Flags",
            _ => char.ToUpper(type[0]) + type.Substring(1)
        };
    }

    string GetSymbolIcon(string type)
    {
        return type switch
        {
            "bird" => "🦅",
            "flower" => "🌸",
            "tree" => "🌳",
            "motto" => "📜",
            "animal" => "🦌",
            "flag" => "🏴",
            _ => "⭐"
        };
    }

    string GetBackgroundColor(string type)
    {
        return type switch
        {
            "bird" => "bg-gradient-to-br from-blue-100 to-indigo-200",
            "flower" => "bg-gradient-to-br from-pink-100 to-rose-200",
            "tree" => "bg-gradient-to-br from-green-100 to-emerald-200",
            "motto" => "bg-gradient-to-br from-gray-100 to-slate-200",
            "animal" => "bg-gradient-to-br from-amber-100 to-orange-200",
            "flag" => "bg-gradient-to-br from-red-100 to-blue-200",
            _ => "bg-gradient-to-br from-gray-100 to-gray-200"
        };
    }

    string GetPluralType(string type)
    {
        if (type.EndsWith("s")) return type;
        return type + "s";
    }
}